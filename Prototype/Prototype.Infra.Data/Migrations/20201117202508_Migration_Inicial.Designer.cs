// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prototype.Infra.Data;

namespace Prototype.Infra.Data.Migrations
{
    [DbContext(typeof(PrototypeDataContext))]
    [Migration("20201117202508_Migration_Inicial")]
    partial class Migration_Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Prototype.Domain.Entities.BeneficioServidor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("CPF")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnName("Matricula")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Orgao")
                        .IsRequired()
                        .HasColumnName("Orgao")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SetorDescricao")
                        .HasColumnName("SetorDescricao")
                        .HasColumnType("text");

                    b.Property<int>("SetorTramitacao")
                        .HasColumnName("Setor_Atual")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Servidores");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.Blokc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Street")
                        .HasColumnName("Street")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UnitQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Blokcs");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("BeneficioServidorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Categoria")
                        .HasColumnName("Categoria")
                        .HasColumnType("integer");

                    b.Property<string>("CategoriaDescicao")
                        .HasColumnName("CategoriaDescicao")
                        .HasColumnType("text");

                    b.Property<string>("FileAsBase64")
                        .IsRequired()
                        .HasColumnName("Arquivo_Base64")
                        .HasColumnType("text");

                    b.Property<byte[]>("FileAsByteArray")
                        .IsRequired()
                        .HasColumnName("Bytes")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("Nome_Arquivo")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnName("Tamanho_Arquivo")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Tipo")
                        .HasColumnType("text")
                        .HasDefaultValue("application/pdf");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Ultima_Modificacao")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 11, 17, 17, 25, 7, 688, DateTimeKind.Local).AddTicks(9793));

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ServidorId")
                        .HasColumnType("uuid");

                    b.Property<string>("SetorDescricao")
                        .HasColumnType("text");

                    b.Property<int>("SetorTramitacao")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeneficioServidorId");

                    b.HasIndex("ServidorId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.ProcessoTramitacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataTramitacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Data_Tramitacao")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2020, 11, 17, 17, 25, 7, 695, DateTimeKind.Local).AddTicks(4941));

                    b.Property<Guid?>("DocumentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DocumentoId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ServidorId")
                        .HasColumnType("uuid");

                    b.Property<int>("SetorDestino")
                        .HasColumnName("Setor_Destino")
                        .HasColumnType("integer");

                    b.Property<string>("SetorDestinoDescricao")
                        .HasColumnName("Setor_Destino_Descricao")
                        .HasColumnType("text");

                    b.Property<int>("SetorOrigem")
                        .HasColumnName("Setor_Origem")
                        .HasColumnType("integer");

                    b.Property<string>("SetorOrigemDescricao")
                        .HasColumnName("Setor_Origem_Descricao")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioMovimentacao")
                        .IsRequired()
                        .HasColumnName("Usuario")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("DocumentoId1");

                    b.HasIndex("ServidorId");

                    b.ToTable("Tramitacao");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.Proprietary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Proprietary");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("BlokcId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlokcId1")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorLevel")
                        .HasColumnName("FloorLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnName("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("PropietaryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProprietaryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlokcId");

                    b.HasIndex("BlokcId1");

                    b.HasIndex("PropietaryId");

                    b.HasIndex("ProprietaryId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .HasDefaultValue("admin@prototype.com");

                    b.Property<string>("Login")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Login")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("Admin");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Password")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15)
                        .HasDefaultValue("123456");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prototype.Domain.Entities.Documento", b =>
                {
                    b.HasOne("Prototype.Domain.Entities.BeneficioServidor", null)
                        .WithMany("Documentos")
                        .HasForeignKey("BeneficioServidorId");

                    b.HasOne("Prototype.Domain.Entities.BeneficioServidor", "Servidor")
                        .WithMany()
                        .HasForeignKey("ServidorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prototype.Domain.Entities.ProcessoTramitacao", b =>
                {
                    b.HasOne("Prototype.Domain.Entities.Documento", null)
                        .WithMany("Tramitacao")
                        .HasForeignKey("DocumentoId");

                    b.HasOne("Prototype.Domain.Entities.BeneficioServidor", "Documento")
                        .WithMany()
                        .HasForeignKey("DocumentoId1");

                    b.HasOne("Prototype.Domain.Entities.BeneficioServidor", null)
                        .WithMany("Tramitacoes")
                        .HasForeignKey("ServidorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prototype.Domain.Entities.Unit", b =>
                {
                    b.HasOne("Prototype.Domain.Entities.Blokc", "Blokc")
                        .WithMany()
                        .HasForeignKey("BlokcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prototype.Domain.Entities.Blokc", null)
                        .WithMany("Units")
                        .HasForeignKey("BlokcId1");

                    b.HasOne("Prototype.Domain.Entities.Proprietary", "Proprietary")
                        .WithMany()
                        .HasForeignKey("PropietaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prototype.Domain.Entities.Proprietary", null)
                        .WithMany("Units")
                        .HasForeignKey("ProprietaryId");
                });
#pragma warning restore 612, 618
        }
    }
}
